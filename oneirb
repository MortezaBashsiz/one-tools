#!/usr/bin/ruby

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
    VAR_LOCATION = "/var/lib/one"
    TEMPLATE_LOCATION="/etc/one/occi_templates"
    CONFIGURATION_FILE = "/etc/one/occi-server.conf"
    LIB_LOCATION = "/usr/lib/one"
    ETC_LOCATION = "/etc/one"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
    VAR_LOCATION = ONE_LOCATION+"/var"
    TEMPLATE_LOCATION=ONE_LOCATION+"/etc/occi_templates"
    CONFIGURATION_FILE = ONE_LOCATION+"/etc/occi-server.conf"
    LIB_LOCATION = ONE_LOCATION+"/lib"
    ETC_LOCATION = ONE_LOCATION + "/etc"
end

OCCI_AUTH = VAR_LOCATION + "/.one/occi_auth"
ONEGATE_AUTH = VAR_LOCATION + "/.one/onegate_auth"

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cloud/occi"
$: << RUBY_LIB_LOCATION+"/cloud" # For the Repository Manager
$: << LIB_LOCATION+'/oneflow/lib'

################################################
# Required libraries
################################################
require 'yaml'
require 'erb'
require 'tempfile'
require 'fileutils'
require 'json'

require 'opennebula'
require 'opennebula/oneflow_client'
require 'CloudAuth'
require 'CloudServer'
require 'models'
require 'log'
include OpenNebula

require 'VirtualMachineOCCI'
require 'VirtualMachinePoolOCCI'
require 'VirtualNetworkOCCI'
require 'VirtualNetworkPoolOCCI'
require 'ImageOCCI'
require 'ImagePoolOCCI'
require 'UserOCCI'
require 'UserPoolOCCI'

require 'pp'

if ENV['ONE_AUTH']
  authfile = ENV['ONE_AUTH']
else
  authfile = "ENV['HOME']/.one/one_auth"
end

# OpenNebula credentials
CREDENTIALS = File.read(authfile).strip
# XML_RPC endpoint where OpenNebula is listening
ENDPOINT    = "http://localhost:2633/RPC2"

@client = Client.new(CREDENTIALS, ENDPOINT)

begin
    conf = YAML.load_file(CONFIGURATION_FILE)
rescue Exception => e
    puts "Error parsing config file #{CONFIGURATION_FILE}: #{e.message}"
    exit 1
end

conf[:template_location] = TEMPLATE_LOCATION

@config = conf

version = ">= 0"
gem 'pry', version
load Gem.bin_path('pry', 'pry', version)
#require "irb"
#
#if __FILE__ == $0
#  IRB.start(__FILE__)
#else
#  # check -e option
#  if /^-e$/ =~ $0
#    IRB.start(__FILE__)
#  else
#    IRB.setup(__FILE__)
#  end
#end
#
