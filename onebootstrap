#!/usr/bin/env ruby

require "yaml"
require "tempfile"
require "pp"
require "erb"

DIR = File.dirname(__FILE__)

yaml_file = ARGV[0] || File.join(DIR,"bootstrap","default.yaml")

begin
    conf = YAML.load_file(yaml_file)
rescue
    STDERR.puts "'#{yaml_file}' is not a valid yaml file."
end

def banner(item,name)
    puts "Create #{item.to_s.capitalize} '#{name}':"
end

def run(cmd)
    out = `#{cmd}`
    puts out
    puts
end

def create_user(user)
    banner(:user,user[:name])

    run("oneuser create #{user[:name]} #{user[:pass]}")
end

def create_image(image)
    banner(:image,image[:name])

    cmd = "oneimage create"

    cmd << " --name #{image[:name]}" if image[:name]
    cmd << " --type #{image[:type]}" if image[:type]
    cmd << " --driver #{image[:driver]}" if image[:driver]
    cmd << " --path #{image[:path]}" if image[:path]

    ds = image[:ds] || "default"
    cmd << " -d #{ds}"

    run(cmd)
end

def create_host(host)
    banner(:host,host[:name])

    run("onehost create #{host[:name]} -i #{host[:im]} -v #{host[:vmm]} -n #{host[:net]}")
end

DATASTORE_TPL=<<EOF
<% if ds[:name] %>
NAME = <%= ds[:name] %>
<% end %>
<% if ds[:ds_mad] %>
DS_MAD = <%= ds[:ds_mad] %>
<% end %>
<% if ds[:tm_mad] %>
TM_MAD = <%= ds[:tm_mad] %>
<% end %>
<% if ds[:safe_dirs] %>
SAFE_DIRS = <%= ds[:safe_dirs] %>
<% end %>
EOF

def create_datastore(ds)
    banner(:datastore,ds[:name])

    tpl = ERB.new(DATASTORE_TPL,nil,'<>').result(binding)

    tpl_file = Tempfile.new('onebootstrap')
    tpl_file.write(tpl)
    tpl_file.close

    run("onedatastore create #{tpl_file.path}")

    tpl_file.unlink
end

NETWORK_TPL=<<EOF
<% if net[:name] %>
NAME = <%= net[:name] %>
<% end %>
<% if net[:name] %>
TYPE = <%= net[:type] %>
<% end %>
<% if net[:name] %>
BRIDGE = <%= net[:bridge] %>
<% end %>
<% net[:leases].each do |l| %>
LEASES = [ IP = <%= l %> ]
<% end %>
EOF

def create_net(net)
    banner(:net,net[:name])

    tpl = ERB.new(NETWORK_TPL,nil,'<>').result(binding)

    tpl_file = Tempfile.new('onebootstrap')
    tpl_file.write(tpl)
    tpl_file.close

    run("onevnet create #{tpl_file.path}")

    tpl_file.unlink
end

conf.each do |item|
    klass = item[:class]
    case klass
    when :user then create_user(item)
    when :image then create_image(item)
    when :host then create_host(item)
    when :net then create_net(item)
    when :datastore then create_datastore(item)
    end
end
