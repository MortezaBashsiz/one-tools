#!/usr/bin/env ruby

require "yaml"
require "tempfile"
require "pp"
require "erb"

DIR = File.dirname(__FILE__)

yaml_file = ARGV[0] || File.join(DIR,"bootstrap","default.yaml")

begin
    conf = YAML.load_file(yaml_file)
rescue
    STDERR.puts "'#{yaml_file}' is not a valid yaml file."
end

def banner(item,name)
    puts "Create #{item.to_s.capitalize} '#{name}':"
end

def run(cmd)
    out = `#{cmd}`
    puts out
    puts
end

def create_user(user)
    banner(:user,user[:name])

    run("oneuser create #{user[:name]} #{user[:pass]}")
end

def create_image(image)
    banner(:image,image[:name])

    image[:datastore] ||= "default"

    cmd = "oneimage create"
    image.each do |k,v|
        next if k == :class
        cmd << " --#{k} #{v}"
    end

    run(cmd)
end

def create_host(host)
    banner(:host,host[:name])

    name = host.delete(:name)

    cmd = "onehost create #{name}"
    host.each do |k,v|
        next if k == :class
        cmd << " --#{k} #{v}"
    end

    run(cmd)
end

NETWORK_TPL=<<EOF
<% if net[:name] %>
NAME = <%= net[:name] %>
<% end %>
<% if net[:name] %>
TYPE = <%= net[:type] %>
<% end %>
<% if net[:name] %>
BRIDGE = <%= net[:bridge] %>
<% end %>
<% net[:leases].each do |l| %>
LEASES = [ IP = <%= l %> ]
<% end %>
EOF

def create_net(net)
    banner(:net,net[:name])

    tpl = ERB.new(NETWORK_TPL,nil,'<>').result(binding)

    tpl_file = Tempfile.new('onebootstrap')
    tpl_file.write(tpl)
    tpl_file.close

    run("onevnet create #{tpl_file.path}")

    tpl_file.unlink
end

DATASTORE_TPL=<<EOF
<% if ds[:name] %>
NAME = <%= ds[:name] %>
<% end %>
<% if ds[:ds_mad] %>
DS_MAD = <%= ds[:ds_mad] %>
<% end %>
<% if ds[:tm_mad] %>
TM_MAD = <%= ds[:tm_mad] %>
<% end %>
<% if ds[:safe_dirs] %>
SAFE_DIRS = <%= ds[:safe_dirs] %>
<% end %>
EOF

def create_datastore(ds)
    banner(:datastore,ds[:name])

    tpl = ERB.new(DATASTORE_TPL,nil,'<>').result(binding)

    tpl_file = Tempfile.new('onebootstrap')
    tpl_file.write(tpl)
    tpl_file.close

    run("onedatastore create #{tpl_file.path}")

    tpl_file.unlink
end

def create_template(template)
    banner(:template,template[:name])

    cmd = "onetemplate create"
    template.each do |k,v|
        next if k == :class
        cmd << " --#{k} #{v}"
    end

    run(cmd)
end

# Add SAFE_DIRS = / to the default datastore
# ugly but works...
system("EDITOR=\"sed -i '$ a\SAFE_DIRS=/'\" onedatastore update default")

# # This does not work because the public key contains a space
# ssh_key_pub = File.read(File.expand_path('~/.ssh/id_dsa.pub'))
# system("EDITOR=\"sed -i '$ a\SSH_PUBLIC_KEY=\\\"#{ssh_key_pub}\\\"'\" oneuser update 0")

conf.each do |item|
    next if item[:enabled] == false

    klass = item[:class]
    case klass
    when :user      then create_user(item)
    when :image     then create_image(item)
    when :host      then create_host(item)
    when :net       then create_net(item)
    when :datastore then create_datastore(item)
    when :template  then create_template(item)
    end
end
